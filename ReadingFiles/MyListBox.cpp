#include <windows.h>#include <errno.h>#include <direct.h>#include <richedit.h>#include <stdlib.h>#include <string.h>#include <string>#include <fstream>#include <sstream>#include <iterator>#include <vector>#include <algorithm>//#include <ctime>#include <locale>#include "MyListBox.h"#include "FileOperations.h"using namespace std;#define LISTBOXITEMSNR	100#define MAXPATH			256#define MAXREAD			8192LRESULT CALLBACK MyListProc (HWND hWnd, UINT iMsg, WPARAM wParam, LPARAM lParam){	static HMENU	hSubMenu,hSubMenu1,hMenu;	POINT			point;	char			szBuffer[MAXPATH + 1];	int				i,t_ItemsNr;	int				t_ListBoxItems[LISTBOXITEMSNR];	static char			sReadBuffer[MAXREAD],szFile[MAXPATH];	HANDLE				t_HANDLEFile;	static OFSTRUCT 	ofs;	DWORD				t_FileReadBytes;	std::vector <char>	t_BuffFile;	switch(iMsg)	{	case WM_RBUTTONDOWN:	    point.x=LOWORD(lParam);	    point.y=HIWORD(lParam);	    ClientToScreen(hWnd,&point);	    hMenu=CreatePopupMenu();	    hSubMenu=CreatePopupMenu();	    //----------------------------------	    AppendMenu(hMenu,MF_STRING,1000,"Do nothing");	    hSubMenu=CreatePopupMenu();	    	    AppendMenu(hSubMenu,MF_STRING,1001,"Generate something - do smth");	    AppendMenu(hSubMenu,MF_STRING,1002,"Merge files");			AppendMenu(hSubMenu,MF_SEPARATOR,0,0);	    AppendMenu(hSubMenu,MF_STRING,1007,"Generate 100 MB test.txt");	    AppendMenu(hMenu,MF_POPUP,(UINT_PTR)hSubMenu,"Common tasks");	    //----------------------------------	    int sel=TrackPopupMenuEx(hMenu,			TPM_CENTERALIGN|TPM_RETURNCMD,			point.x,point.y,hWnd,NULL);		switch (sel)		{		case 1001://Generate something		{			//Beep(400,50);			MessageBeep(MB_ICONQUESTION);			if((i = SendMessage (MyhWndList,LB_GETCURSEL, 0, 0L))==LB_ERR)				break;			if((t_ItemsNr = SendMessage (MyhWndList,LB_GETSELITEMS,				LISTBOXITEMSNR,(LPARAM)t_ListBoxItems))==LB_ERR)break;			for(unsigned k=0;k<t_ItemsNr;k++)			{				SendMessage (MyhWndList, LB_GETTEXT,t_ListBoxItems[0],					(LPARAM) szBuffer);				if (OpenFile (szBuffer, &ofs, OF_EXIST | OF_READ)!=-1)				{   					(t_HANDLEFile=CreateFile(szBuffer,						FILE_ALL_ACCESS,FILE_SHARE_WRITE,0,						OPEN_ALWAYS,0,NULL));					ReadFile(t_HANDLEFile, &sReadBuffer,						MAXREAD,&t_FileReadBytes,NULL);//t_BuffFile					for(unsigned ii=0;ii<MAXREAD;ii++)						t_BuffFile.push_back(sReadBuffer[ii]);					for(unsigned ii=0;ii<MAXREAD;ii++)						sReadBuffer[ii]=t_BuffFile[ii];					SetWindowText(MyhWndRichEdit,sReadBuffer);						//(char*)&t_BuffFile);					Beep(800,50);				}			}			break;		}//Generate something, end of		case 1002://Merge files		{			vector<char>t_FileBuff1;			vector<string>z_Filenames;			int i;			string t_FilenameToSave="";//="xxx";			if(!(t_j=z_MergeMarkedFromListBox(z_Filenames,t_FileBuff1)))break;			t_FilenameToSave+=*z_Filenames.begin();			t_FilenameToSave+="___merged.txt";			t_FileSave((char*)(t_FilenameToSave.c_str()),				&t_FileBuff1[0],t_FileBuff1.size());			break;		}//End of Merge files		case 1007://Generate 100 MB test.txt		{			vector<char>t_FileBuff00;			for(unsigned i=0;i<10;i++)			    t_FileBuff00.push_back('=');			t_FileSave("test_100_000_000_bytes.txt",&t_FileBuff00[0],				t_FileBuff00.size());			break;		}//Generate 100 MB test.txt, end of		}//end of switch sel//	    return 0;	}//end of switch iMsg    return CallWindowProc (MyWndListOld, hWnd, iMsg, wParam, lParam);}